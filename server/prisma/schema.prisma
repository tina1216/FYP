generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  hashedToken String
  voterId     Int
  Voter       Voter    @relation(fields: [voterId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Voter {
  id           Int            @id @default(autoincrement())
  idNumber     String         @unique
  password     String
  role         Role           @default(USER)
  hasVoted     Boolean        @default(false)
  RefreshToken RefreshToken[]
}

model Election {
  id             Int         @id @default(autoincrement())
  electionName   String
  electionStatus Status      @default(UPCOMING)
  votes          Vote[]
  Candidate      Candidate[]
  Results        Results[]
}

model Candidate {
  id            Int      @id @default(autoincrement())
  electionId    Int
  candidateName String
  detail        String?
  Election      Election @relation(fields: [electionId], references: [id])
}

model Vote {
  id            Int      @id @default(autoincrement())
  electionId    Int
  voterId       Int
  encryptedVote String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Election      Election @relation(fields: [electionId], references: [id])
}

model Results {
  id                 Int      @id @default(autoincrement())
  electionId         Int
  TotalEncryptedVote String
  Election           Election @relation(fields: [electionId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  CLOSED
  UPCOMING
}
